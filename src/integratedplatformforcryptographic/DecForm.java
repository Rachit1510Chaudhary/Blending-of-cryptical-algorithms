package integratedplatformforcryptographic;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author This PC
 */
public class DecForm extends javax.swing.JFrame {

    	private static final String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; 

    /**
     * Creates new form DecForm
     */
    public DecForm() {
        initComponents();
    }
    public static String decrypt(String ciphertext,int shift)
{
         String decryptMessage = "";
        for(int i=0; i < ciphertext.length();i++)  

        {
            // Shift one character at a time
            char alphabet = ciphertext.charAt(i);
            // if alphabet lies between a and z 
            if(alphabet >= 'a' && alphabet <= 'z')
            {
                // shift alphabet
                alphabet = (char) (alphabet - shift);
            
                // shift alphabet lesser than 'a'
                if(alphabet < 'a') {
                    //reshift to starting position 
                    alphabet = (char) (alphabet-'a'+'z'+1);
                }
                decryptMessage = decryptMessage + alphabet;
            }    
                // if alphabet lies between A and Z
            else if(alphabet >= 'A' && alphabet <= 'Z')
            {
             // shift alphabet
                alphabet = (char) (alphabet - shift);
                
                //shift alphabet lesser than 'A'
                if (alphabet < 'A') {
                    // reshift to starting position 
                    alphabet = (char) (alphabet-'A'+'Z'+1);
                }
                decryptMessage = decryptMessage + alphabet;            
            }
            else 
            {
             decryptMessage = decryptMessage + alphabet;            
            } 
        }
        return decryptMessage;
}
    	public static String autodecryption(String msg, String key) 
	{ 
		String currentKey = key; 
		String decryptMsg = ""; 

		// applying decryption algorithm 
		for (int x = 0; x < msg.length(); x++) { 
			int get1 = alphabet.indexOf(msg.charAt(x)); 
			int get2 = alphabet.indexOf(currentKey.charAt(x)); 
			int total = (get1 - get2) % 26; 
			total = (total < 0) ? total + 26 : total; 
			decryptMsg += alphabet.charAt(total); 
			currentKey += alphabet.charAt(total); 
		} 
		return decryptMsg; 
	} 
        static String deciphering(String cipher,int key) {
String plaintext ="";
for(int i=0;i<cipher.length();i++)
{
    char c=cipher.charAt(i);
int charNum=(char)c-97;
int deciphered =((modInverse(key,26)) *(charNum))%26;
char newT =(char)(deciphered +97);
plaintext+=newT;
}
return plaintext;
}
static int modInverse(int a, int m)
{
a=a%m;
for(int x=1;x<m;x++)
if((a*x)%m==1)
return x;
return 1;
}
static String originalText(String cipher_text, String key) 
{ 
	String orig_text=""; 

	for (int i = 0 ; i < cipher_text.length() && 
							i < key.length(); i++) 
	{ 
		// converting in range 0-25 
		int x = (cipher_text.charAt(i) - 
					key.charAt(i) + 26) %26; 

		// convert into alphabets(ASCII) 
		x += 'A'; 
		orig_text+=(char)(x); 
	} 
	return orig_text; 
} 
static String decryptCipher(String cipher,int a,int b)  
    { 
        String msg = ""; 
        int a_inv = 0; 
        int flag = 0; 
  
        //Find a^-1 (the multiplicative inverse of a  
        //in the group of integers modulo m.)  
        for (int i = 0; i < 26; i++)  
        { 
            flag = (a * i) % 26; 
  
            // Check if (a*i)%26 == 1, 
            // then i will be the multiplicative inverse of a 
            if (flag == 1)  
            { 
                a_inv = i; 
            } 
        } 
        for (int i = 0; i < cipher.length(); i++)  
        { 
            /*Applying decryption formula a^-1 ( x - b ) mod m  
            {here x is cipher[i] and m is 26} and added 'A'  
            to bring it in range of ASCII alphabet[ 65-90 | A-Z ] */ 
            if (cipher.charAt(i) != ' ')  
            { 
                msg = msg + (char) (((a_inv *  
                        ((cipher.charAt(i) + 'A' - b)) % 26)) + 'A'); 
            }  
            else //else simply append space characte 
            { 
                msg += cipher.charAt(i); 
            } 
        } 
  
        return msg; 
    } 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        L3 = new javax.swing.JLabel();
        L4 = new javax.swing.JLabel();
        T1 = new javax.swing.JTextField();
        T2 = new javax.swing.JTextField();
        T3 = new javax.swing.JTextField();
        L5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        L6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        L2 = new javax.swing.JLabel();

        setResizable(false);

        L3.setText("Key");

        L4.setText("Key");

        L5.setText("Decrypted Text");

        jLabel1.setText("Select Algorithm");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<------------------------->", "Additive Cipher", "Multiplicative Cipher", "Autokey Cipher", "Vignere Cipher", "RSA", "Affine Cipher" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jButton1.setText("Decyption");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Decryption");

        L2.setText("Cipher Text");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(L3)
                                    .addComponent(L2)
                                    .addComponent(L4)
                                    .addComponent(L5))))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(T1)
                            .addComponent(T2)
                            .addComponent(T3)
                            .addComponent(L6, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L2)
                    .addComponent(T1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L3)
                    .addComponent(T2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L4)
                    .addComponent(T3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(L6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L5))
                .addGap(27, 27, 27)
                .addComponent(jButton1)
                .addContainerGap(189, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        L2.setText("Cipher Text");
        L3.setText("Key");
        L2.setVisible(true);
        L3.setVisible(true);
        T1.setVisible(true);
        T2.setVisible(true);
        L3.setVisible(true);
        T2.setVisible(true);
        jButton1.setVisible(true);
        String val=jComboBox1.getSelectedItem().toString();
        if(!(val.equalsIgnoreCase("Affine Cipher")))
        {
            T3.setVisible(false);
            L4.setVisible(false);
        }
        if(val.equalsIgnoreCase("Affine Cipher"))
        {
            T3.setVisible(true);
            L4.setVisible(true);
        }

        else if(val.equalsIgnoreCase("RSA"))
        {
            T2.setVisible(false);
            L3.setVisible(false);
        }
        else if(val.equals("Euclidean Algo For GCD")|| val.equalsIgnoreCase("Multiplicative Inverse Without Using Euclidean"))
        {
            L2.setText("First Number");
            L3.setText("Second Number");
        }
        else  if(val.equals("Smallest Primitive Root"))
        {
            L2.setText("First Number");
            L3.setVisible(false);
            T2.setVisible(false);
        }

    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String algo=jComboBox1.getSelectedItem().toString();
        L2.setText(algo);

        if(algo.equalsIgnoreCase("Additive Cipher"))
        {
            String val=T1.getText();
            int key=Integer.parseInt(T2.getText());
            String res=decrypt(val,key);
            L6.setText(res.toString());

        }
        
        else if(algo.equalsIgnoreCase("Multiplicative Cipher"))
        {
            String val=T1.getText();
            int key=Integer.parseInt(T2.getText());
            String res=deciphering(val,key);
            L6.setText(res.toString());

        }
        
        else if(algo.equalsIgnoreCase("Affine Cipher"))
        {
            String val=T1.getText();
            int key=Integer.parseInt(T2.getText());
            int key2=Integer.parseInt(T3.getText());

            String res=decryptCipher(val,key,key2);
            L6.setText(res.toString());

        }
        
        else if(algo.equalsIgnoreCase("Autokey Cipher"))
        {
            String val=T1.getText();
            String m=T2.getText();

            String res=autodecryption(val,m);
            L6.setText(res.toString());

        }
        
        else if(algo.equalsIgnoreCase("Vignere Cipher"))
        {
            String str = T1.getText();
            String key = T2.getText();
            
            String res = originalText(str, key);

            L6.setText(res);

        
        }
        
        else if(algo.equalsIgnoreCase("RSA"))
        {
            String str = T1.getText();
            RSA rsa = new RSA();
            String res=RSA.bytesToString(str.getBytes());
            L6.setText(res);

        }
        /*
        else if(algo.equalsIgnoreCase("Euclidean Algo For GCD"))
        {
            int a  = Integer.parseInt(T1.getText());
            int b  = Integer.parseInt(T2.getText());
            int c=gcd(a,b);
            L6.setText(""+c);

        }
        else if(algo.equalsIgnoreCase("Rail Fence Cipher"))
        {

            String val=T1.getText();
            int key=Integer.parseInt(T2.getText());

            RailFenceBasic rf=new RailFenceBasic();
            String res;
            try {
                res = rf.Encryptionval(val,key);
                L6.setText(res);
            } catch (Exception ex) {
                Logger.getLogger(EncForm.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        else if(algo.equalsIgnoreCase("Multiplicative Inverse Without Using Euclidean"))
        {
            int a  = Integer.parseInt(T1.getText());
            int b  = Integer.parseInt(T2.getText());
            int c=modInverse(a,b);
            L6.setText(""+c);

        }
        else
        {
            int a  = Integer.parseInt(T1.getText());
            int b=GFG.findPrimitive(a);
            L6.setText(""+b);
        }
        */
        L5.setVisible(true);
        L6.setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DecForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DecForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DecForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DecForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DecForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L2;
    private javax.swing.JLabel L3;
    private javax.swing.JLabel L4;
    private javax.swing.JLabel L5;
    private javax.swing.JLabel L6;
    private javax.swing.JTextField T1;
    private javax.swing.JTextField T2;
    private javax.swing.JTextField T3;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
