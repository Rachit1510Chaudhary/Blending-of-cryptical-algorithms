/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package integratedplatformforcryptographic;

import static integratedplatformforcryptographic.GFG.findPrimitive;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author This PC
 */
public class EncForm extends javax.swing.JFrame {

    private static final String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; 
    /**
     * Creates new form EncForm
     */
    public EncForm() {
        initComponents();
        L2.setVisible(false);
        L3.setVisible(false);
        L4.setVisible(false);
        L5.setVisible(false);
        L6.setVisible(false);
        T1.setVisible(false);
        T2.setVisible(false);
        T3.setVisible(false);
        jButton1.setVisible(false);
    }
    
    	 public static StringBuffer encrypt(String text, int s) 
    { 
        StringBuffer result= new StringBuffer(); 
  
        for (int i=0; i<text.length(); i++) 
        { 
            if (Character.isUpperCase(text.charAt(i))) 
            { 
                char ch = (char)(((int)text.charAt(i) + 
                                  s - 65) % 26 + 65); 
                result.append(ch); 
            } 
            else
            { 
                char ch = (char)(((int)text.charAt(i) + 
                                  s - 97) % 26 + 97); 
                result.append(ch); 
            } 
        } 
        return result; 
    } 
          public static String encrypt1(String str,int key)
 {
 String ctext="";
 int i;
 for(i=0;i<str.length();i++)
 {
     char t=str.charAt(i);
     int ch=(int)t-97;
     int c=(key*ch)%26;
     char newC=(char)(c+97);
     ctext+=newC;
 }
     return ctext;
 }
 static String encrypt2(char[] msg,int a,int b)  
    { 
        /// Cipher Text initially empty 
        String cipher = ""; 
        for (int i = 0; i < msg.length; i++) 
        { 
            // Avoid space to be encrypted  
            /* applying encryption formula ( a x + b ) mod m 
            {here x is msg[i] and m is 26} and added 'A' to  
            bring it in range of ascii alphabet[ 65-90 | A-Z ] */ 
            if (msg[i] != ' ')  
            { 
                cipher = cipher 
                        + (char) ((((a * (msg[i] - 'A')) + b) % 26) + 'A'); 
            } else // else simply append space character 
            { 
                cipher += msg[i]; 
            } 
        } 
        return cipher; 
    } 
 	public static String autoEncryption(String msg, String key) 
	{ 
		int len = msg.length(); 

		// generating the keystream 
		String newKey = key.concat(msg); 
		newKey = newKey.substring(0, newKey.length() - key.length()); 
		String encryptMsg = ""; 

		// applying encryption algorithm 
		for (int x = 0; x < len; x++) { 
			int first = alphabet.indexOf(msg.charAt(x)); 
			int second = alphabet.indexOf(newKey.charAt(x)); 
			int total = (first + second) % 26; 
			encryptMsg += alphabet.charAt(total); 
		} 
		return encryptMsg; 
	}
        static String generateKey(String str, String key) 
{ 
	int x = str.length(); 

	for (int i = 0; ; i++) 
	{ 
		if (x == i) 
			i = 0; 
		if (key.length() == str.length()) 
			break; 
		key+=(key.charAt(i)); 
	} 
	return key; 
} 

// This function returns the encrypted text 
// generated with the help of the key 
static String cipherText(String str, String key) 
{ 
	String cipher_text=""; 

	for (int i = 0; i < str.length(); i++) 
	{ 
		// converting in range 0-25 
		int x = (str.charAt(i) + key.charAt(i)) %26; 

		// convert into alphabets(ASCII) 
		x += 'A'; 

		cipher_text+=(char)(x); 
	} 
	return cipher_text; 
} 
 public static int gcd(int a, int b) 
    { 
        if (a == 0) 
            return b; 
  
        return gcd(b % a, a); 
    } 
static int modInverse(int a, int m) 
    { 
        a = a % m; 
        for (int x = 1; x < m; x++) 
            if ((a * x) % m == 1) 
                return x; 
        return 1; 
    } 

          
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        L2 = new javax.swing.JLabel();
        L3 = new javax.swing.JLabel();
        L4 = new javax.swing.JLabel();
        T1 = new javax.swing.JTextField();
        T2 = new javax.swing.JTextField();
        T3 = new javax.swing.JTextField();
        L5 = new javax.swing.JLabel();
        L6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Select Algorithm");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<------------------------->", "Additive Cipher", "Multiplicative Cipher", "Autokey Cipher", "Smallest Primitive Root", "RSA", "Vignere Cipher", "Rail Fence Cipher", "Multiplicative Inverse Without Using Euclidean", "Euclidean Algo For GCD", "Affine Cipher" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jButton1.setText("Encyption");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Encryption");

        L2.setText("Plain Text");

        L3.setText("Key");

        L4.setText("Key");

        L5.setText("Encrypted Text");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(L3)
                                    .addComponent(L2)
                                    .addComponent(L4)
                                    .addComponent(L5))))
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(T1)
                            .addComponent(T2)
                            .addComponent(T3)
                            .addComponent(L6, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(196, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L2)
                    .addComponent(T1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L3)
                    .addComponent(T2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L4)
                    .addComponent(T3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(L6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L5))
                .addGap(39, 39, 39)
                .addComponent(jButton1)
                .addContainerGap(170, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String algo=jComboBox1.getSelectedItem().toString();
        L2.setText(algo);
        
        if(algo.equalsIgnoreCase("Additive Cipher"))
                {
                    String val=T1.getText();
                    int key=Integer.parseInt(T2.getText());
                    StringBuffer res=encrypt(val,key);
                    L6.setText(res.toString());
                    
                    
                }
        else if(algo.equalsIgnoreCase("Multiplicative Cipher"))
                {
                    String val=T1.getText();
                    int key=Integer.parseInt(T2.getText());
                    String res=encrypt1(val,key);
                    L6.setText(res.toString());
                    
                    
                }
         else if(algo.equalsIgnoreCase("Affine Cipher"))
                {
                    String val=T1.getText();
                    int key=Integer.parseInt(T2.getText());
                    int key2=Integer.parseInt(T3.getText());
                 
                    String res=encrypt2(val.toCharArray(),key,key2);
                    L6.setText(res.toString());
                    
                    
                }
         else if(algo.equalsIgnoreCase("Autokey Cipher"))
                {
                    String val=T1.getText();
                    String m=T2.getText();
                   
                    String res=autoEncryption(val,m);
                    L6.setText(res.toString());
                    
                    
                }
 else if(algo.equalsIgnoreCase("Vignere Cipher"))
                {
                  String str = T1.getText();
	String keyword = T2.getText(); 
String key = generateKey(str, keyword); 
	String res = cipherText(str, key); 
                   
                   
                    L6.setText(res);
                    
                    
                }
         else if(algo.equalsIgnoreCase("RSA"))
                {
                  String str = T1.getText();
	           RSA rsa = new RSA();
                   String res=RSA.bytesToString(str.getBytes());
                    L6.setText(res);
                    
                    
                }
        else if(algo.equalsIgnoreCase("Euclidean Algo For GCD"))
                {
                  int a  = Integer.parseInt(T1.getText());
                  int b  = Integer.parseInt(T2.getText());
	          int c=gcd(a,b); 
                  L6.setText(""+c);
                    
                    
                }
         else if(algo.equalsIgnoreCase("Rail Fence Cipher"))
                {
                 
                    String val=T1.getText();
                    int key=Integer.parseInt(T2.getText());
                   
                   RailFenceBasic rf=new RailFenceBasic();
                   String res;
            try {
                res = rf.Encryptionval(val,key);
                L6.setText(res);
            } catch (Exception ex) {
                Logger.getLogger(EncForm.class.getName()).log(Level.SEVERE, null, ex);
            }
                    
                    
                    
                }
        
        else if(algo.equalsIgnoreCase("Multiplicative Inverse Without Using Euclidean"))
                {
                  int a  = Integer.parseInt(T1.getText());
                  int b  = Integer.parseInt(T2.getText());
	          int c=modInverse(a,b); 
                  L6.setText(""+c);
                    
                    
                }
        else
        {
                  int a  = Integer.parseInt(T1.getText());
         int b=GFG.findPrimitive(a);   
         L6.setText(""+b);
        }
                L5.setVisible(true);
                L6.setVisible(true);
        

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        L2.setText("Plain Text");
            L3.setText("Key");
        L2.setVisible(true);
        L3.setVisible(true);
        T1.setVisible(true);
        T2.setVisible(true);
                    L3.setVisible(true);
            T2.setVisible(true);
        jButton1.setVisible(true);
        String val=jComboBox1.getSelectedItem().toString();
        if(!(val.equalsIgnoreCase("Affine Cipher")))
        {
            T3.setVisible(false);
        L4.setVisible(false);
        }
        if(val.equalsIgnoreCase("Affine Cipher"))
        {
            T3.setVisible(true);
        L4.setVisible(true);
        }

        else if(val.equalsIgnoreCase("RSA"))
        {
            T2.setVisible(false);
        L3.setVisible(false);
        }
        else if(val.equals("Euclidean Algo For GCD")|| val.equalsIgnoreCase("Multiplicative Inverse Without Using Euclidean"))
        {
            L2.setText("First Number");
            L3.setText("Second Number");
        }
        else  if(val.equals("Smallest Primitive Root"))
        {
            L2.setText("First Number");
            L3.setVisible(false);
            T2.setVisible(false);
        }

        
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EncForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EncForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EncForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EncForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EncForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L2;
    private javax.swing.JLabel L3;
    private javax.swing.JLabel L4;
    private javax.swing.JLabel L5;
    private javax.swing.JLabel L6;
    private javax.swing.JTextField T1;
    private javax.swing.JTextField T2;
    private javax.swing.JTextField T3;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
